{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"What is the AdminNetworkPolicy API? \u00b6 The AdminNetworkPolicy API is an open source project managed by the SIG-NETWORK community. It is a collection of resources, which aim to make securing Kubernetes clusters easier for Administrators. Getting started \u00b6 Whether you are a user interested in using the AdminNetworkPolicy API or an implementer interested in conforming to the API, the following resources will help give you the necessary background: API overview Examples API Source AdminNetworkPolicy API User Stories \u00b6 The following user stories drive the concepts of the AdminNetworkPolicy API for the v1alpha1 version of the api. More information on how the community ended up here can be found in the API KEP and in the accompanying KEP PR Future API developments should all start with a well-defined and intentional user story. Story 1: Deny traffic at a cluster level \u00b6 As a cluster admin, I want to apply non-overridable deny rules to certain pod(s) and(or) Namespace(s) that isolate the selected resources from all other cluster internal traffic. For Example: In this diagram there is a AdminNetworkPolicy applied to the sensitive-ns denying ingress from all other in-cluster resources for all ports and protocols. Story 2: Allow traffic at a cluster level \u00b6 As a cluster admin, I want to apply non-overridable allow rules to certain pods(s) and(or) Namespace(s) that enable the selected resources to communicate with all other cluster internal entities. For Example: In this diagram there is a AdminNetworkPolicy applied to every namespace in the cluster allowing egress traffic to kube-dns pods, and ingress traffic from pods in monitoring-ns for all ports and protocols. Story 3: Explicitly Delegate traffic to existing K8s Network Policy \u00b6 As a cluster admin, I want to explicitly delegate traffic so that it skips any remaining cluster network policies and is handled by standard namespace scoped network policies. For Example: In the diagram below egress traffic destined for the service svc-pub in namespace bar-ns-1 on TCP port 8080 is delegated to the k8s network policies implemented in foo-ns-1 and foo-ns-2. If no k8s network policies touch the delegated traffic the traffic will be allowed. Story 4: Create and Isolate multiple tenants in a cluster \u00b6 As a cluster admin, I want to build tenants in my cluster that are isolated from each other by default. Tenancy may be modeled as 1:1, where 1 tenant is mapped to a single Namespace, or 1:n, where a single tenant may own more than 1 Namespace. For Example: In the diagram below two tenants (Foo and Bar) are defined such that all ingress traffic is denied to either tenant. Story 5: Cluster Wide Default Guardrails \u00b6 As a cluster admin I want to change the default security model for my cluster, so that all intra-cluster traffic (except for certain essential traffic) is blocked by default. Namespace owners will need to use NetworkPolicies to explicitly allow known traffic. This follows a whitelist model which is familiar to many security administrators, and similar to how kubernetes suggests network policy be used . For Example: In the following diagram all Ingress traffic to every cluster resource is denied by a baseline deny rule. Who is working on AdminNetworkPolicy? \u00b6 The AdminNetworkPolicy API is a SIG-Network project being built to improve and standardize cluster-wide security policy in k8s. In-progress implementations include Antrea (VMware) and Openshift (RedHat), If you are interested in contributing to or building an implementation using the AdminNetworkPolicy API then don\u2019t hesitate to get involved!","title":"Introduction"},{"location":"#what-is-the-adminnetworkpolicy-api","text":"The AdminNetworkPolicy API is an open source project managed by the SIG-NETWORK community. It is a collection of resources, which aim to make securing Kubernetes clusters easier for Administrators.","title":"What is the AdminNetworkPolicy API?"},{"location":"#getting-started","text":"Whether you are a user interested in using the AdminNetworkPolicy API or an implementer interested in conforming to the API, the following resources will help give you the necessary background: API overview Examples API Source","title":"Getting started"},{"location":"#adminnetworkpolicy-api-user-stories","text":"The following user stories drive the concepts of the AdminNetworkPolicy API for the v1alpha1 version of the api. More information on how the community ended up here can be found in the API KEP and in the accompanying KEP PR Future API developments should all start with a well-defined and intentional user story.","title":"AdminNetworkPolicy API User Stories"},{"location":"#story-1-deny-traffic-at-a-cluster-level","text":"As a cluster admin, I want to apply non-overridable deny rules to certain pod(s) and(or) Namespace(s) that isolate the selected resources from all other cluster internal traffic. For Example: In this diagram there is a AdminNetworkPolicy applied to the sensitive-ns denying ingress from all other in-cluster resources for all ports and protocols.","title":"Story 1: Deny traffic at a cluster level"},{"location":"#story-2-allow-traffic-at-a-cluster-level","text":"As a cluster admin, I want to apply non-overridable allow rules to certain pods(s) and(or) Namespace(s) that enable the selected resources to communicate with all other cluster internal entities. For Example: In this diagram there is a AdminNetworkPolicy applied to every namespace in the cluster allowing egress traffic to kube-dns pods, and ingress traffic from pods in monitoring-ns for all ports and protocols.","title":"Story 2: Allow traffic at a cluster level"},{"location":"#story-3-explicitly-delegate-traffic-to-existing-k8s-network-policy","text":"As a cluster admin, I want to explicitly delegate traffic so that it skips any remaining cluster network policies and is handled by standard namespace scoped network policies. For Example: In the diagram below egress traffic destined for the service svc-pub in namespace bar-ns-1 on TCP port 8080 is delegated to the k8s network policies implemented in foo-ns-1 and foo-ns-2. If no k8s network policies touch the delegated traffic the traffic will be allowed.","title":"Story 3: Explicitly Delegate traffic to existing K8s Network Policy"},{"location":"#story-4-create-and-isolate-multiple-tenants-in-a-cluster","text":"As a cluster admin, I want to build tenants in my cluster that are isolated from each other by default. Tenancy may be modeled as 1:1, where 1 tenant is mapped to a single Namespace, or 1:n, where a single tenant may own more than 1 Namespace. For Example: In the diagram below two tenants (Foo and Bar) are defined such that all ingress traffic is denied to either tenant.","title":"Story 4: Create and Isolate multiple tenants in a cluster"},{"location":"#story-5-cluster-wide-default-guardrails","text":"As a cluster admin I want to change the default security model for my cluster, so that all intra-cluster traffic (except for certain essential traffic) is blocked by default. Namespace owners will need to use NetworkPolicies to explicitly allow known traffic. This follows a whitelist model which is familiar to many security administrators, and similar to how kubernetes suggests network policy be used . For Example: In the following diagram all Ingress traffic to every cluster resource is denied by a baseline deny rule.","title":"Story 5: Cluster Wide Default Guardrails"},{"location":"#who-is-working-on-adminnetworkpolicy","text":"The AdminNetworkPolicy API is a SIG-Network project being built to improve and standardize cluster-wide security policy in k8s. In-progress implementations include Antrea (VMware) and Openshift (RedHat), If you are interested in contributing to or building an implementation using the AdminNetworkPolicy API then don\u2019t hesitate to get involved!","title":"Who is working on AdminNetworkPolicy?"},{"location":"docs/","text":"Welcome to MkDocs \u00b6 For full documentation visit mkdocs.org . Commands \u00b6 mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout \u00b6 mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Welcome to MkDocs"},{"location":"docs/#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"docs/#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"docs/#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"guides/api-overview/","text":"API overview \u00b6 Prior to the AdminNetworkPolicy API there was no native tooling for Cluster Admins to apply security rules in a cluster-wide manner, and in some cases Network Policies were being incorrectly used to do so, creating a complex web of objects to be maintained. With the advent of the AdminNetworkPolicy API Cluster Admins will now have the ability to apply policy on in-cluster workloads with only a few simple policy objects that can be applied globally. Roles and personas \u00b6 In this documentation we refer to three primary personas: Application Developer Namespace Administrator Cluster Administrator Resource Model \u00b6 There are two main objects in the AdminNetworkPolicy API resource model AdminNetworkPolicy (ANP) BaselineAdminNetworkPolicy (BANP) General Notes \u00b6 Any well defined AdminNetworkPolicy rules should be read as-is, i.e. there will not be any implicit isolation effects for the Pods selected by the AdminNetworkPolicy, as opposed to what NetworkPolicy rules imply. As of v1alpha1 of this API we focus primarily on E/W cluster traffic and do not address N/S (Ingress/Egress) use cases. However this is an issue the community would like to keep thinking about during further iterations, and a tracking issue can be found/ commented on here ---> issue #28 The AdminNetworkPolicy Resource \u00b6 The AdminNetworkPolicy (ANP) resource will help administrators set strict security rules for the cluster, i.e. a developer CANNOT override these rules by creating NetworkPolicies that apply to the same workloads as the AdminNetworkPolicy. AdminNetworkPolicy Actions \u00b6 Unlike the NetworkPolicy resource in which each rule represents an allowed traffic, AdminNetworkPolicies will enable administrators to set Pass , Deny or Allow as the action of each rule. AdminNetworkPolicy rules should be read as-is, i.e. there will not be any implicit isolation effects for the Pods selected by the AdminNetworkPolicy, as opposed to implicit deny NetworkPolicy rules imply. Pass : Traffic that matches a Pass rule will skip all further rules from all numbered ANPs and instead be enforced by the K8s NetworkPolicies. If there is no K8s NetworkPolicy of BaselineAdminNetworkPolicy rule match match, traffic will be governed by the implementation. For most implementations, this means \"allow\", but there may be implementations which have their own policies outside of the standard Kubernetes APIs. Deny : Traffic that matches a Deny rule will be dropped. Allow : Traffic that matches an Allow rule will be allowed. AdminNetworkPolicy Deny rules are useful for administrators to explicitly block traffic with malicious in-cluster clients, or workloads that pose security risks. Those traffic restrictions can only be lifted once the Deny rules are deleted, modified by the admin, or overridden by a higher priority rule. On the other hand, the Allow rules can be used to call out traffic in the cluster that needs to be allowed for certain components to work as expected (egress to CoreDNS for example). Those traffic should not be blocked when developers apply NetworkPolicy to their Namespaces which isolates the workloads. AdminNetworkPolicy Pass rules allows an admin to delegate security posture for certain traffic to the Namespace owners by overriding any lower precedence Allow or Deny rules. For example, intra-tenant traffic management can be delegated to tenant admins explicitly with the use of Pass rules. More specifically traffic selected by a Pass rule will skip any further ANP rule selection, be evaluated against any well defined NetworkPolicies, and if not terminated ultimately be evaluated against any BaselineAdminNetworkPolicies. AdminNetworkPolicy Priorities \u00b6 Integer priority values were added to the AdminNetworkPolicy API to allow Cluster Admins to express direct and intentional ordering between various ANP Objects. The Priority field in the ANP spec is defined as an integer value within the range 0 to 1000 where rules with lower priority values have higher precedence. Regardless of priority value all ANPs have higher precedence than any defined NetworkPolicy or BaselineAdminNetworkPolicy objects. AdminNetworkPolicy Rules \u00b6 Each ANP should define at least one Ingress or Egress relevant in-cluster traffic flow along with the associated Action that should occur. In each gress rule the user should AT THE MINIMUM define an Action , and at least one AdminNetworkPolicyPeer . Optionally the user may also define select Ports to filter traffic on and also a name for each rule to make management/ reporting easier for Admins. AdminNetworkPolicy Status \u00b6 For v1alpha1 of this API the ANP status field is simply defined as a list of metav1.condition s. Currently there are no rule as to what these conditions should display, and it is up to each implementation to report what they see fit. For further API iterations the community may consider standardizing these conditions based on the usefulness they provide for various implementors. The BaselineAdminNetworkPolicy Resource \u00b6 The BaselineAdminNetworkPolicy (BANP) resource will allow administrators to set baseline security rules that describes default connectivity for cluster workloads, which CAN be overridden by developer NetworkPolicies if needed. The major use case BANPs solve is the ability to flip the default security stance of the cluster . BaselineAdminNetworkPolicy Rule Actions \u00b6 BaselineAdminNetworkPolicies allow administrators to define two distinct actions for each well defined rule, Allow and Deny . Deny : Traffic that matches a Deny rule will be dropped. Allow : Traffic that matches an Allow rule will be allowed. BaselineAdminNetworkPolicy Rules \u00b6 BANP Rules are defined and behave the same (Except for the Pass action) as ANP rules . BaselineAdminNetworkPolicy Status \u00b6 The BANP status field follows the same constructs as used by the AdminNetworkPolicy.Status field.","title":"API overview"},{"location":"guides/api-overview/#api-overview","text":"Prior to the AdminNetworkPolicy API there was no native tooling for Cluster Admins to apply security rules in a cluster-wide manner, and in some cases Network Policies were being incorrectly used to do so, creating a complex web of objects to be maintained. With the advent of the AdminNetworkPolicy API Cluster Admins will now have the ability to apply policy on in-cluster workloads with only a few simple policy objects that can be applied globally.","title":"API overview"},{"location":"guides/api-overview/#roles-and-personas","text":"In this documentation we refer to three primary personas: Application Developer Namespace Administrator Cluster Administrator","title":"Roles and personas"},{"location":"guides/api-overview/#resource-model","text":"There are two main objects in the AdminNetworkPolicy API resource model AdminNetworkPolicy (ANP) BaselineAdminNetworkPolicy (BANP)","title":"Resource Model"},{"location":"guides/api-overview/#general-notes","text":"Any well defined AdminNetworkPolicy rules should be read as-is, i.e. there will not be any implicit isolation effects for the Pods selected by the AdminNetworkPolicy, as opposed to what NetworkPolicy rules imply. As of v1alpha1 of this API we focus primarily on E/W cluster traffic and do not address N/S (Ingress/Egress) use cases. However this is an issue the community would like to keep thinking about during further iterations, and a tracking issue can be found/ commented on here ---> issue #28","title":"General Notes"},{"location":"guides/api-overview/#the-adminnetworkpolicy-resource","text":"The AdminNetworkPolicy (ANP) resource will help administrators set strict security rules for the cluster, i.e. a developer CANNOT override these rules by creating NetworkPolicies that apply to the same workloads as the AdminNetworkPolicy.","title":"The AdminNetworkPolicy Resource"},{"location":"guides/api-overview/#adminnetworkpolicy-actions","text":"Unlike the NetworkPolicy resource in which each rule represents an allowed traffic, AdminNetworkPolicies will enable administrators to set Pass , Deny or Allow as the action of each rule. AdminNetworkPolicy rules should be read as-is, i.e. there will not be any implicit isolation effects for the Pods selected by the AdminNetworkPolicy, as opposed to implicit deny NetworkPolicy rules imply. Pass : Traffic that matches a Pass rule will skip all further rules from all numbered ANPs and instead be enforced by the K8s NetworkPolicies. If there is no K8s NetworkPolicy of BaselineAdminNetworkPolicy rule match match, traffic will be governed by the implementation. For most implementations, this means \"allow\", but there may be implementations which have their own policies outside of the standard Kubernetes APIs. Deny : Traffic that matches a Deny rule will be dropped. Allow : Traffic that matches an Allow rule will be allowed. AdminNetworkPolicy Deny rules are useful for administrators to explicitly block traffic with malicious in-cluster clients, or workloads that pose security risks. Those traffic restrictions can only be lifted once the Deny rules are deleted, modified by the admin, or overridden by a higher priority rule. On the other hand, the Allow rules can be used to call out traffic in the cluster that needs to be allowed for certain components to work as expected (egress to CoreDNS for example). Those traffic should not be blocked when developers apply NetworkPolicy to their Namespaces which isolates the workloads. AdminNetworkPolicy Pass rules allows an admin to delegate security posture for certain traffic to the Namespace owners by overriding any lower precedence Allow or Deny rules. For example, intra-tenant traffic management can be delegated to tenant admins explicitly with the use of Pass rules. More specifically traffic selected by a Pass rule will skip any further ANP rule selection, be evaluated against any well defined NetworkPolicies, and if not terminated ultimately be evaluated against any BaselineAdminNetworkPolicies.","title":"AdminNetworkPolicy Actions"},{"location":"guides/api-overview/#adminnetworkpolicy-priorities","text":"Integer priority values were added to the AdminNetworkPolicy API to allow Cluster Admins to express direct and intentional ordering between various ANP Objects. The Priority field in the ANP spec is defined as an integer value within the range 0 to 1000 where rules with lower priority values have higher precedence. Regardless of priority value all ANPs have higher precedence than any defined NetworkPolicy or BaselineAdminNetworkPolicy objects.","title":"AdminNetworkPolicy Priorities"},{"location":"guides/api-overview/#adminnetworkpolicy-rules","text":"Each ANP should define at least one Ingress or Egress relevant in-cluster traffic flow along with the associated Action that should occur. In each gress rule the user should AT THE MINIMUM define an Action , and at least one AdminNetworkPolicyPeer . Optionally the user may also define select Ports to filter traffic on and also a name for each rule to make management/ reporting easier for Admins.","title":"AdminNetworkPolicy Rules"},{"location":"guides/api-overview/#adminnetworkpolicy-status","text":"For v1alpha1 of this API the ANP status field is simply defined as a list of metav1.condition s. Currently there are no rule as to what these conditions should display, and it is up to each implementation to report what they see fit. For further API iterations the community may consider standardizing these conditions based on the usefulness they provide for various implementors.","title":"AdminNetworkPolicy Status"},{"location":"guides/api-overview/#the-baselineadminnetworkpolicy-resource","text":"The BaselineAdminNetworkPolicy (BANP) resource will allow administrators to set baseline security rules that describes default connectivity for cluster workloads, which CAN be overridden by developer NetworkPolicies if needed. The major use case BANPs solve is the ability to flip the default security stance of the cluster .","title":"The BaselineAdminNetworkPolicy Resource"},{"location":"guides/api-overview/#baselineadminnetworkpolicy-rule-actions","text":"BaselineAdminNetworkPolicies allow administrators to define two distinct actions for each well defined rule, Allow and Deny . Deny : Traffic that matches a Deny rule will be dropped. Allow : Traffic that matches an Allow rule will be allowed.","title":"BaselineAdminNetworkPolicy Rule Actions"},{"location":"guides/api-overview/#baselineadminnetworkpolicy-rules","text":"BANP Rules are defined and behave the same (Except for the Pass action) as ANP rules .","title":"BaselineAdminNetworkPolicy Rules"},{"location":"guides/api-overview/#baselineadminnetworkpolicy-status","text":"The BANP status field follows the same constructs as used by the AdminNetworkPolicy.Status field.","title":"BaselineAdminNetworkPolicy Status"},{"location":"guides/examples/","text":"Example AdminNetworkPolicy API Object Definitions \u00b6 These examples will start with the object yaml defintions used to implement the core use cases . Please feel free to contribute more examples that may seem relevant to other users :-). Sample Spec for Story 1: Deny traffic at a cluster level \u00b6 apiVersion : policy.networking.k8s.io/v1alpha1 kind : AdminNetworkPolicy metadata : name : cluster-wide-deny-example spec : priority : 10 subject : namespaces : matchLabels : kubernetes.io/metadata.name : sensitive-ns ingress : - action : Deny from : - namespaces : namespaceSelector : {} name : select-all-deny-all Sample Spec for Story 2: Allow traffic at a cluster level \u00b6 apiVersion : policy.networking.k8s.io/v1alpha1 kind : AdminNetworkPolicy metadata : name : cluster-wide-allow-example spec : priority : 30 subject : namespaces : {} ingress : - action : Allow from : - namespaces : namespaceSelector : matchLabels : kubernetes.io/metadata.name : monitoring-ns egress : - action : Allow to : - namespaces : namespaceSelector : matchlabels : kubernetes.io/metadata.name : kube-system pods : podSelector : matchlabels : app : kube-dns Story 3: Explicitly Delegate traffic to existing K8s Network Policy \u00b6 apiVersion : policy.networking.k8s.io/v1alpha1 kind : AdminNetworkPolicy metadata : name : pub-svc-delegate-example spec : priority : 20 subject : namespaces : {} egress : - action : Pass to : - namespaces : namespaceSelector : matchLabels : kubernetes.io/metadata.name : bar-ns-1 pods : podSelector : matchLabels : app : svc-pub ports : - portNumber : protocol : TCP port : 8080 Story 4: Create and Isolate multiple tenants in a cluster \u00b6 apiVersion : policy.networking.k8s.io/v1alpha1 kind : AdminNetworkPolicy metadata : name : tenant-creation-example spec : priority : 50 subject : namespaces : matchExpressions : { key : \"tenant\" ; operator : Exists } ingress : - action : Deny from : - namespaces : notSameLabels : - tenant This can also be expressed in the following way: apiVersion : policy.networking.k8s.io/v1alpha1 kind : AdminNetworkPolicy metadata : name : tenant-creation-example spec : priority : 50 subject : namespaces : matchExpressions : { key : \"tenant\" ; operator : Exists } ingress : - action : Pass # Pass inter-tenant traffic to any defined NetworkPolicies from : - namespaces : sameLabels : - tenant - action : Deny # Deny everything else other than same tenant traffic from : - namespaces : namespaceSelector : {} Story 5: Cluster Wide Default Guardrails \u00b6 apiVersion : policy.networking.k8s.io/v1alpha1 kind : BaselineAdminNetworkPolicy metadata : name : baseline-rule-example spec : subject : namespaces : {} ingress : - action : Deny # zero-trust cluster default security posture from : - namespaces : namespaceSelector : {}","title":"Examples"},{"location":"guides/examples/#example-adminnetworkpolicy-api-object-definitions","text":"These examples will start with the object yaml defintions used to implement the core use cases . Please feel free to contribute more examples that may seem relevant to other users :-).","title":"Example AdminNetworkPolicy API Object Definitions"},{"location":"guides/examples/#sample-spec-for-story-1-deny-traffic-at-a-cluster-level","text":"apiVersion : policy.networking.k8s.io/v1alpha1 kind : AdminNetworkPolicy metadata : name : cluster-wide-deny-example spec : priority : 10 subject : namespaces : matchLabels : kubernetes.io/metadata.name : sensitive-ns ingress : - action : Deny from : - namespaces : namespaceSelector : {} name : select-all-deny-all","title":"Sample Spec for Story 1: Deny traffic at a cluster level"},{"location":"guides/examples/#sample-spec-for-story-2-allow-traffic-at-a-cluster-level","text":"apiVersion : policy.networking.k8s.io/v1alpha1 kind : AdminNetworkPolicy metadata : name : cluster-wide-allow-example spec : priority : 30 subject : namespaces : {} ingress : - action : Allow from : - namespaces : namespaceSelector : matchLabels : kubernetes.io/metadata.name : monitoring-ns egress : - action : Allow to : - namespaces : namespaceSelector : matchlabels : kubernetes.io/metadata.name : kube-system pods : podSelector : matchlabels : app : kube-dns","title":"Sample Spec for Story 2: Allow traffic at a cluster level"},{"location":"guides/examples/#story-3-explicitly-delegate-traffic-to-existing-k8s-network-policy","text":"apiVersion : policy.networking.k8s.io/v1alpha1 kind : AdminNetworkPolicy metadata : name : pub-svc-delegate-example spec : priority : 20 subject : namespaces : {} egress : - action : Pass to : - namespaces : namespaceSelector : matchLabels : kubernetes.io/metadata.name : bar-ns-1 pods : podSelector : matchLabels : app : svc-pub ports : - portNumber : protocol : TCP port : 8080","title":"Story 3: Explicitly Delegate traffic to existing K8s Network Policy"},{"location":"guides/examples/#story-4-create-and-isolate-multiple-tenants-in-a-cluster","text":"apiVersion : policy.networking.k8s.io/v1alpha1 kind : AdminNetworkPolicy metadata : name : tenant-creation-example spec : priority : 50 subject : namespaces : matchExpressions : { key : \"tenant\" ; operator : Exists } ingress : - action : Deny from : - namespaces : notSameLabels : - tenant This can also be expressed in the following way: apiVersion : policy.networking.k8s.io/v1alpha1 kind : AdminNetworkPolicy metadata : name : tenant-creation-example spec : priority : 50 subject : namespaces : matchExpressions : { key : \"tenant\" ; operator : Exists } ingress : - action : Pass # Pass inter-tenant traffic to any defined NetworkPolicies from : - namespaces : sameLabels : - tenant - action : Deny # Deny everything else other than same tenant traffic from : - namespaces : namespaceSelector : {}","title":"Story 4: Create and Isolate multiple tenants in a cluster"},{"location":"guides/examples/#story-5-cluster-wide-default-guardrails","text":"apiVersion : policy.networking.k8s.io/v1alpha1 kind : BaselineAdminNetworkPolicy metadata : name : baseline-rule-example spec : subject : namespaces : {} ingress : - action : Deny # zero-trust cluster default security posture from : - namespaces : namespaceSelector : {}","title":"Story 5: Cluster Wide Default Guardrails"},{"location":"references/spec/","text":"API Specification \u00b6 REPLACE_WITH_GENERATED_CONTENT","title":"API specification"},{"location":"references/spec/#api-specification","text":"REPLACE_WITH_GENERATED_CONTENT","title":"API Specification"}]}